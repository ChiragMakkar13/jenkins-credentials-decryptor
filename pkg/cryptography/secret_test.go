package cryptography

import (
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"testing"
)

const (
	encryptedSecretWithNoMagic = "UKFS\xe6\xedv\xf8\x987xo^\x83\xf2*\xb4\x03\x97.\xe7\xd2\xde\x14\xa3\xb6\xcfF\x9c\xa3^)q\xa5\xa0\x85h\xb1'\xaa\xb4\xad\xdb\xf0\x8dKe\x06\xa0k˪ˣX\x8c6\xe6\x14V\x86:\xeb\x1dq/\xfa\xaf?\xf5®>\xec\x83HC\x83\xf9\xc2\xf1qo\x87\x9f\xef(\xed\x06\xb7\x93`\xf2fC\xccy\xe6\xe0Bۙ\xcc\x1e5[\x9c\x9b\xa0K\x9e\xab\xb09\xecA\x1d19HS\xb3<\xa7\xa4\xec\xce\xf3\xb7\xe5\xde\x10J\x06\xdeK9zj\x85\x95\xcee\x19=}W-h\xfb\xb9\x121V\xb1F\xeeK\xf1\t\xe8\x87\xf6d\xe1\xb8\xfd%\xca:a\xdcnH\xdf\xfc\xd2\xc9[\xf8e-΅\xab\xbc\x04\xdfK'1j%\xbe\x93\x12\xfb\x00\x8a\x89\x84\xc1\x1f`\x9bڏy\xedMc\xfcGrh\xcf\x1e\xef!~\xec\xbd\xf5\xba\x97]u\xffr\t\xf7\x19X9\xcfo\xce\x15}l\xbaM\x89~\xe5s\xed\xd8:\xb6ᓋRX\x84#\xabu[\x07\xf8\xde\x1awH\xc2;b \x04\xc3"

	decryptedSecret = "z\xe5R\xebs\x9fΦ<$<\xa0Q1\xd0$\xfd\xe9p$\x0e!\xd3\xeb\x19\xb9\x91\x87ү \x14\xcc\n?\"m\xd9˃\xb9\a\x81-\xcaL\x19\x88\xb1C\xb4\x0e\x04\xa3\f\x1a\xe00\x064l\xebN\x18\xa6E|\xa7\x9d^\xf3\xbak\xc1\x03\xd8?\xce\xfdy9\x8bQ'\xbe\x14և>l\xcao 8\x91\xc6R\x1d\b\xfa;\x0fdmn\x81p\xc7hr\xa7\x8c\x89\x8a3\x17\x00]Q\x19Ԏ\xe8\xb2/\xfb{\xc1\xb3\xabp\x16\xc58\rw\xe5\xd7\xd0,\xaam\xb8e\f\xaa\xbcS\xc0\xbe\xcd,\xab\xf3\x87C&\xc4\xcd\xdeBmU\xaf)`\xb5ʺJ\xa1?\xceI\xd4\xdcO*\xe3\x84\xf6\b\xe9\xc3\x18$H\x16\x12݇@V_\xeehh\x9c\xab\xd9{\x81\xbe\x0f֦`W\rq\x1e\xe3Ҩ\xe4\xaeVʝn\x02)\u007f\x9aoZ\xc0\t\xd3j\xd5\x13\xa9,\x1ea\xceN@\x1fo\x1fn\xe4\x0eC\xdd\xdb$\x84!\xbb\x1cg\xb5k::::MAGIC::::\x03\x03\x03"
)

func Test_return_error_when_encrypted_secret_does_not_contain_checksum(t *testing.T) {
	masterKey, _ := ioutil.ReadFile("../../test/resources/master.key")

	_, err := DecryptHudsonSecret(masterKey, []byte(encryptedSecretWithNoMagic))

	assert.Contains(t, err.Error(), "Error. Decrypted hudson secret does not contain expected checksum.")
}

func Test_decrypts_hudson_secret(t *testing.T) {
	masterKey, _ := ioutil.ReadFile("../../test/resources/master.key")
	hudsonSecret, _ := ioutil.ReadFile("../../test/resources/hudson.util.Secret")

	decrypted, _ := DecryptHudsonSecret(masterKey, hudsonSecret)

	assert.Equal(t, decrypted, []byte(decryptedSecret))
}
